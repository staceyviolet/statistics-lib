/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://localhost:8080".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface AxisLabel
 */
export interface AxisLabel {
    /**
     * 
     * @type {string}
     * @memberof AxisLabel
     */
    formattedValue: string;
    /**
     * 
     * @type {string}
     * @memberof AxisLabel
     */
    label: string;
    /**
     * 
     * @type {number}
     * @memberof AxisLabel
     */
    position: number;
    /**
     * 
     * @type {number}
     * @memberof AxisLabel
     */
    value: number;
}

/**
 * 
 * @export
 * @interface BasicReportQuery
 */
export interface BasicReportQuery {
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof BasicReportQuery
     */
    adUnits?: Array<string>;
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof BasicReportQuery
     */
    bidders?: Array<string>;
    /**
     * 
     * @type {Array&lt;FilterBean&gt;}
     * @memberof BasicReportQuery
     */
    countries?: Array<FilterBean>;
    /**
     * 
     * @type {Array&lt;FilterBean&gt;}
     * @memberof BasicReportQuery
     */
    devices?: Array<FilterBean>;
    /**
     * 
     * @type {Date}
     * @memberof BasicReportQuery
     */
    endDate: Date;
    /**
     * 
     * @type {UIXValueBoolean}
     * @memberof BasicReportQuery
     */
    groupByAdUnit: UIXValueBoolean;
    /**
     * 
     * @type {UIXValueBoolean}
     * @memberof BasicReportQuery
     */
    groupByBidder: UIXValueBoolean;
    /**
     * 
     * @type {UIXValueBoolean}
     * @memberof BasicReportQuery
     */
    groupByCountry: UIXValueBoolean;
    /**
     * 
     * @type {UIXValueBoolean}
     * @memberof BasicReportQuery
     */
    groupByDevice: UIXValueBoolean;
    /**
     * 
     * @type {UIXValueBoolean}
     * @memberof BasicReportQuery
     */
    groupByHbSource: UIXValueBoolean;
    /**
     * 
     * @type {UIXValueBoolean}
     * @memberof BasicReportQuery
     */
    groupBySite: UIXValueBoolean;
    /**
     * 
     * @type {UIXValueBoolean}
     * @memberof BasicReportQuery
     */
    groupByUtmCampaign: UIXValueBoolean;
    /**
     * 
     * @type {UIXValueBoolean}
     * @memberof BasicReportQuery
     */
    groupByUtmContent: UIXValueBoolean;
    /**
     * 
     * @type {UIXValueBoolean}
     * @memberof BasicReportQuery
     */
    groupByUtmMedium: UIXValueBoolean;
    /**
     * 
     * @type {UIXValueBoolean}
     * @memberof BasicReportQuery
     */
    groupByUtmSource: UIXValueBoolean;
    /**
     * 
     * @type {UIXValueBoolean}
     * @memberof BasicReportQuery
     */
    groupByUtmTerm: UIXValueBoolean;
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof BasicReportQuery
     */
    metrics?: Array<BasicReportQuery.MetricsEnum>;
    /**
     * 
     * @type {Array&lt;FilterBean&gt;}
     * @memberof BasicReportQuery
     */
    sites?: Array<FilterBean>;
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof BasicReportQuery
     */
    sizes?: Array<string>;
    /**
     * 
     * @type {Date}
     * @memberof BasicReportQuery
     */
    startDate: Date;
    /**
     * 
     * @type {string}
     * @memberof BasicReportQuery
     */
    timeGrouping: BasicReportQuery.TimeGroupingEnum;
}

/**
 * @export
 * @namespace BasicReportQuery
 */
export namespace BasicReportQuery {
    /**
     * @export
     * @enum {string}
     */
    export enum MetricsEnum {
        BidRequests = <any> 'BidRequests',
        SiteRequests = <any> 'SiteRequests',
        AdUnitRequests = <any> 'AdUnitRequests',
        Bids = <any> 'Bids',
        Timeouts = <any> 'Timeouts',
        Impressions = <any> 'Impressions',
        Wins = <any> 'Wins',
        UsdRevenue = <any> 'UsdRevenue',
        UsdECPM = <any> 'UsdECPM',
        UsdBidPrice = <any> 'UsdBidPrice',
        Revenue = <any> 'Revenue',
        ECPM = <any> 'eCPM',
        BidPrice = <any> 'BidPrice',
        EurRevenue = <any> 'EurRevenue',
        EurECPM = <any> 'EurECPM',
        EurBidPrice = <any> 'EurBidPrice',
        BidRate = <any> 'BidRate',
        TimeoutRate = <any> 'TimeoutRate',
        WinRate = <any> 'WinRate'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum TimeGroupingEnum {
        Total = <any> 'Total',
        Daily = <any> 'Daily',
        Hourly = <any> 'Hourly'
    }
}

/**
 * 
 * @export
 * @interface BidderHistoryBean
 */
export interface BidderHistoryBean {
    /**
     * 
     * @type {Array&lt;StatValueSnapshot&gt;}
     * @memberof BidderHistoryBean
     */
    bidRateHistory: Array<StatValueSnapshot>;
    /**
     * 
     * @type {string}
     * @memberof BidderHistoryBean
     */
    bidderName: string;
    /**
     * 
     * @type {Array&lt;StatValueSnapshot&gt;}
     * @memberof BidderHistoryBean
     */
    eurBidPriceHistory: Array<StatValueSnapshot>;
    /**
     * 
     * @type {Array&lt;StatValueSnapshot&gt;}
     * @memberof BidderHistoryBean
     */
    eurEcpmHistory: Array<StatValueSnapshot>;
    /**
     * 
     * @type {Array&lt;StatValueSnapshot&gt;}
     * @memberof BidderHistoryBean
     */
    eurRevenueHistory: Array<StatValueSnapshot>;
    /**
     * 
     * @type {Array&lt;StatValueSnapshot&gt;}
     * @memberof BidderHistoryBean
     */
    timeoutRateHistory: Array<StatValueSnapshot>;
    /**
     * 
     * @type {Array&lt;StatValueSnapshot&gt;}
     * @memberof BidderHistoryBean
     */
    timeoutsHistory: Array<StatValueSnapshot>;
    /**
     * 
     * @type {Array&lt;StatValueSnapshot&gt;}
     * @memberof BidderHistoryBean
     */
    usdBidPriceHistory: Array<StatValueSnapshot>;
    /**
     * 
     * @type {Array&lt;StatValueSnapshot&gt;}
     * @memberof BidderHistoryBean
     */
    usdEcpmHistory: Array<StatValueSnapshot>;
    /**
     * 
     * @type {Array&lt;StatValueSnapshot&gt;}
     * @memberof BidderHistoryBean
     */
    usdRevenueHistory: Array<StatValueSnapshot>;
    /**
     * 
     * @type {Array&lt;StatValueSnapshot&gt;}
     * @memberof BidderHistoryBean
     */
    winRateHistory: Array<StatValueSnapshot>;
}

/**
 * 
 * @export
 * @interface BidderMetricsQuery
 */
export interface BidderMetricsQuery {
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof BidderMetricsQuery
     */
    adUnits?: Array<string>;
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof BidderMetricsQuery
     */
    bidders?: Array<string>;
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof BidderMetricsQuery
     */
    browsers?: Array<string>;
    /**
     * 
     * @type {Array&lt;FilterBean&gt;}
     * @memberof BidderMetricsQuery
     */
    countries?: Array<FilterBean>;
    /**
     * 
     * @type {Array&lt;FilterBean&gt;}
     * @memberof BidderMetricsQuery
     */
    devices?: Array<FilterBean>;
    /**
     * 
     * @type {Date}
     * @memberof BidderMetricsQuery
     */
    endDate: Date;
    /**
     * 
     * @type {Array&lt;FilterBean&gt;}
     * @memberof BidderMetricsQuery
     */
    sites?: Array<FilterBean>;
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof BidderMetricsQuery
     */
    sizes?: Array<string>;
    /**
     * 
     * @type {Date}
     * @memberof BidderMetricsQuery
     */
    startDate: Date;
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof BidderMetricsQuery
     */
    utmCampaigns?: Array<string>;
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof BidderMetricsQuery
     */
    utmMediums?: Array<string>;
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof BidderMetricsQuery
     */
    utmSources?: Array<string>;
}

/**
 * 
 * @export
 * @interface BiddersMetricByTime
 */
export interface BiddersMetricByTime {
    /**
     * 
     * @type {Array&lt;AxisLabel&gt;}
     * @memberof BiddersMetricByTime
     */
    axisX: Array<AxisLabel>;
    /**
     * 
     * @type {Array&lt;BidderHistoryBean&gt;}
     * @memberof BiddersMetricByTime
     */
    biddersData: Array<BidderHistoryBean>;
}

/**
 * 
 * @export
 * @interface BootstrapStatusLabel
 */
export interface BootstrapStatusLabel {
    /**
     * 
     * @type {string}
     * @memberof BootstrapStatusLabel
     */
    label: string;
    /**
     * 
     * @type {number}
     * @memberof BootstrapStatusLabel
     */
    progress: number;
    /**
     * 
     * @type {string}
     * @memberof BootstrapStatusLabel
     */
    status: BootstrapStatusLabel.StatusEnum;
    /**
     * 
     * @type {string}
     * @memberof BootstrapStatusLabel
     */
    tooltip: string;
}

/**
 * @export
 * @namespace BootstrapStatusLabel
 */
export namespace BootstrapStatusLabel {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        Success = <any> 'success',
        Info = <any> 'info',
        Warning = <any> 'warning',
        Danger = <any> 'danger',
        Secondary = <any> 'secondary',
        Primary = <any> 'primary',
        Disabled = <any> 'disabled',
        Error = <any> 'error'
    }
}

/**
 * 
 * @export
 * @interface BundleCreateForm
 */
export interface BundleCreateForm {
    /**
     * 
     * @type {string}
     * @memberof BundleCreateForm
     */
    adUnitId?: string;
    /**
     * 
     * @type {number}
     * @memberof BundleCreateForm
     */
    bundleId?: number;
    /**
     * 
     * @type {UIXValueString}
     * @memberof BundleCreateForm
     */
    description: UIXValueString;
    /**
     * 
     * @type {UIXValueString}
     * @memberof BundleCreateForm
     */
    domain: UIXValueString;
    /**
     * 
     * @type {boolean}
     * @memberof BundleCreateForm
     */
    hasApprovedBidders: boolean;
    /**
     * 
     * @type {UIXValueString}
     * @memberof BundleCreateForm
     */
    name: UIXValueString;
    /**
     * 
     * @type {UIXValueInteger}
     * @memberof BundleCreateForm
     */
    pageLayoutId: UIXValueInteger;
    /**
     * 
     * @type {string}
     * @memberof BundleCreateForm
     */
    prebidVersion: string;
    /**
     * 
     * @type {number}
     * @memberof BundleCreateForm
     */
    siteId?: number;
    /**
     * 
     * @type {UIXValueString}
     * @memberof BundleCreateForm
     */
    tags: UIXValueString;
    /**
     * 
     * @type {number}
     * @memberof BundleCreateForm
     */
    teamId?: number;
}

/**
 * 
 * @export
 * @interface BundleCreateResponseAdmin
 */
export interface BundleCreateResponseAdmin {
    /**
     * 
     * @type {number}
     * @memberof BundleCreateResponseAdmin
     */
    bundleId?: number;
    /**
     * 
     * @type {string}
     * @memberof BundleCreateResponseAdmin
     */
    bundleKey?: string;
    /**
     * 
     * @type {BundleCreateForm}
     * @memberof BundleCreateResponseAdmin
     */
    form?: BundleCreateForm;
}

/**
 * 
 * @export
 * @interface DashboardBean
 */
export interface DashboardBean {
    /**
     * 
     * @type {boolean}
     * @memberof DashboardBean
     */
    partnerInstallation?: boolean;
    /**
     * 
     * @type {Statistics}
     * @memberof DashboardBean
     */
    previousPeriodStatistics: Statistics;
    /**
     * 
     * @type {Statistics}
     * @memberof DashboardBean
     */
    statistics: Statistics;
}

/**
 * 
 * @export
 * @interface DashboardQuery
 */
export interface DashboardQuery {
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof DashboardQuery
     */
    adUnits?: Array<string>;
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof DashboardQuery
     */
    bidders?: Array<string>;
    /**
     * 
     * @type {Array&lt;FilterBean&gt;}
     * @memberof DashboardQuery
     */
    countries?: Array<FilterBean>;
    /**
     * 
     * @type {Array&lt;FilterBean&gt;}
     * @memberof DashboardQuery
     */
    devices?: Array<FilterBean>;
    /**
     * 
     * @type {Date}
     * @memberof DashboardQuery
     */
    endDate: Date;
    /**
     * 
     * @type {Array&lt;FilterBean&gt;}
     * @memberof DashboardQuery
     */
    sites?: Array<FilterBean>;
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof DashboardQuery
     */
    sizes?: Array<string>;
    /**
     * 
     * @type {Date}
     * @memberof DashboardQuery
     */
    startDate: Date;
}

/**
 * 
 * @export
 * @interface FilterBean
 */
export interface FilterBean {
    /**
     * 
     * @type {string}
     * @memberof FilterBean
     */
    label: string;
    /**
     * 
     * @type {string}
     * @memberof FilterBean
     */
    value: string;
}

/**
 * 
 * @export
 * @interface FunnelChartData
 */
export interface FunnelChartData {
    /**
     * 
     * @type {Array&lt;FunnelChartDataBean&gt;}
     * @memberof FunnelChartData
     */
    dataBeans: Array<FunnelChartDataBean>;
}

/**
 * 
 * @export
 * @interface FunnelChartDataBean
 */
export interface FunnelChartDataBean {
    /**
     * 
     * @type {string}
     * @memberof FunnelChartDataBean
     */
    parameterName: string;
    /**
     * 
     * @type {Array&lt;OverviewStatisticsBean&gt;}
     * @memberof FunnelChartDataBean
     */
    parameterStats: Array<OverviewStatisticsBean>;
}

/**
 * 
 * @export
 * @interface IncrementalRevenueChartData
 */
export interface IncrementalRevenueChartData {
    /**
     * 
     * @type {Array&lt;YValuesDouble&gt;}
     * @memberof IncrementalRevenueChartData
     */
    eurValues: Array<YValuesDouble>;
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof IncrementalRevenueChartData
     */
    labels: Array<string>;
    /**
     * 
     * @type {Array&lt;YValuesDouble&gt;}
     * @memberof IncrementalRevenueChartData
     */
    usdValues: Array<YValuesDouble>;
}

/**
 * 
 * @export
 * @interface ItemResponsestring
 */
export interface ItemResponsestring {
    /**
     * 
     * @type {string}
     * @memberof ItemResponsestring
     */
    data: string;
    /**
     * 
     * @type {{ [key: string]: boolean; }}
     * @memberof ItemResponsestring
     */
    permissions: { [key: string]: boolean; };
}

/**
 * 
 * @export
 * @interface JsonReport
 */
export interface JsonReport {
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof JsonReport
     */
    colNames?: Array<string>;
    /**
     * 
     * @type {Array&lt;Mapstringobject&gt;}
     * @memberof JsonReport
     */
    lines?: Array<Mapstringobject>;
}

/**
 * 
 * @export
 * @interface Mapstringobject
 */
export interface Mapstringobject {
    [key: string]: any;

}

/**
 * 
 * @export
 * @interface OverviewChartsData
 */
export interface OverviewChartsData {
    /**
     * 
     * @type {Array&lt;OverviewStatisticsBean&gt;}
     * @memberof OverviewChartsData
     */
    revenueByAdSizes: Array<OverviewStatisticsBean>;
    /**
     * 
     * @type {Array&lt;OverviewStatisticsBean&gt;}
     * @memberof OverviewChartsData
     */
    revenueByAdUnits: Array<OverviewStatisticsBean>;
    /**
     * 
     * @type {Array&lt;OverviewStatisticsBean&gt;}
     * @memberof OverviewChartsData
     */
    revenueByBidders: Array<OverviewStatisticsBean>;
    /**
     * 
     * @type {Array&lt;OverviewStatisticsBean&gt;}
     * @memberof OverviewChartsData
     */
    revenueByCountries: Array<OverviewStatisticsBean>;
    /**
     * 
     * @type {Array&lt;OverviewStatisticsBean&gt;}
     * @memberof OverviewChartsData
     */
    revenueByDevices: Array<OverviewStatisticsBean>;
    /**
     * 
     * @type {Array&lt;OverviewStatisticsBean&gt;}
     * @memberof OverviewChartsData
     */
    revenueBySites: Array<OverviewStatisticsBean>;
}

/**
 * 
 * @export
 * @interface OverviewStatisticsBean
 */
export interface OverviewStatisticsBean {
    /**
     * 
     * @type {number}
     * @memberof OverviewStatisticsBean
     */
    eurParameterValue: number;
    /**
     * 
     * @type {string}
     * @memberof OverviewStatisticsBean
     */
    parameterName: string;
    /**
     * 
     * @type {number}
     * @memberof OverviewStatisticsBean
     */
    parameterValue: number;
    /**
     * 
     * @type {number}
     * @memberof OverviewStatisticsBean
     */
    usdParameterValue: number;
}

/**
 * 
 * @export
 * @interface RegistrationForm
 */
export interface RegistrationForm {
    /**
     * 
     * @type {UIXValueEnumstring}
     * @memberof RegistrationForm
     */
    billingPlan: UIXValueEnumstring;
    /**
     * 
     * @type {UIXValueString}
     * @memberof RegistrationForm
     */
    email: UIXValueString;
    /**
     * 
     * @type {UIXValueBoolean}
     * @memberof RegistrationForm
     */
    needHelp: UIXValueBoolean;
    /**
     * 
     * @type {UIXValueString}
     * @memberof RegistrationForm
     */
    password: UIXValueString;
    /**
     * 
     * @type {UIXValueString}
     * @memberof RegistrationForm
     */
    referralCode: UIXValueString;
    /**
     * 
     * @type {boolean}
     * @memberof RegistrationForm
     */
    valid?: boolean;
}

/**
 * 
 * @export
 * @interface RegistrationResponseAdmin
 */
export interface RegistrationResponseAdmin {
    /**
     * 
     * @type {number}
     * @memberof RegistrationResponseAdmin
     */
    accountId?: number;
    /**
     * 
     * @type {boolean}
     * @memberof RegistrationResponseAdmin
     */
    alreadyRegistered?: boolean;
    /**
     * 
     * @type {RegistrationForm}
     * @memberof RegistrationResponseAdmin
     */
    form?: RegistrationForm;
    /**
     * 
     * @type {boolean}
     * @memberof RegistrationResponseAdmin
     */
    success?: boolean;
}

/**
 * 
 * @export
 * @interface RevenueReportQuery
 */
export interface RevenueReportQuery {
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof RevenueReportQuery
     */
    adUnits?: Array<string>;
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof RevenueReportQuery
     */
    bidders?: Array<string>;
    /**
     * 
     * @type {Array&lt;FilterBean&gt;}
     * @memberof RevenueReportQuery
     */
    countries?: Array<FilterBean>;
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof RevenueReportQuery
     */
    currencies?: Array<string>;
    /**
     * 
     * @type {Array&lt;FilterBean&gt;}
     * @memberof RevenueReportQuery
     */
    devices?: Array<FilterBean>;
    /**
     * 
     * @type {Date}
     * @memberof RevenueReportQuery
     */
    endDate: Date;
    /**
     * 
     * @type {UIXValueBoolean}
     * @memberof RevenueReportQuery
     */
    groupByAdUnit: UIXValueBoolean;
    /**
     * 
     * @type {UIXValueBoolean}
     * @memberof RevenueReportQuery
     */
    groupByBidder: UIXValueBoolean;
    /**
     * 
     * @type {UIXValueBoolean}
     * @memberof RevenueReportQuery
     */
    groupByCountry: UIXValueBoolean;
    /**
     * 
     * @type {UIXValueBoolean}
     * @memberof RevenueReportQuery
     */
    groupByCurrency: UIXValueBoolean;
    /**
     * 
     * @type {UIXValueBoolean}
     * @memberof RevenueReportQuery
     */
    groupByDevice: UIXValueBoolean;
    /**
     * 
     * @type {UIXValueBoolean}
     * @memberof RevenueReportQuery
     */
    groupByHbSource: UIXValueBoolean;
    /**
     * 
     * @type {UIXValueBoolean}
     * @memberof RevenueReportQuery
     */
    groupByMediaType: UIXValueBoolean;
    /**
     * 
     * @type {UIXValueBoolean}
     * @memberof RevenueReportQuery
     */
    groupBySite: UIXValueBoolean;
    /**
     * 
     * @type {UIXValueBoolean}
     * @memberof RevenueReportQuery
     */
    groupBySize: UIXValueBoolean;
    /**
     * 
     * @type {UIXValueBoolean}
     * @memberof RevenueReportQuery
     */
    groupByUtmCampaign: UIXValueBoolean;
    /**
     * 
     * @type {UIXValueBoolean}
     * @memberof RevenueReportQuery
     */
    groupByUtmContent: UIXValueBoolean;
    /**
     * 
     * @type {UIXValueBoolean}
     * @memberof RevenueReportQuery
     */
    groupByUtmMedium: UIXValueBoolean;
    /**
     * 
     * @type {UIXValueBoolean}
     * @memberof RevenueReportQuery
     */
    groupByUtmSource: UIXValueBoolean;
    /**
     * 
     * @type {UIXValueBoolean}
     * @memberof RevenueReportQuery
     */
    groupByUtmTerm: UIXValueBoolean;
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof RevenueReportQuery
     */
    metrics?: Array<RevenueReportQuery.MetricsEnum>;
    /**
     * 
     * @type {Array&lt;FilterBean&gt;}
     * @memberof RevenueReportQuery
     */
    sites?: Array<FilterBean>;
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof RevenueReportQuery
     */
    sizes?: Array<string>;
    /**
     * 
     * @type {Date}
     * @memberof RevenueReportQuery
     */
    startDate: Date;
    /**
     * 
     * @type {string}
     * @memberof RevenueReportQuery
     */
    timeGrouping: RevenueReportQuery.TimeGroupingEnum;
}

/**
 * @export
 * @namespace RevenueReportQuery
 */
export namespace RevenueReportQuery {
    /**
     * @export
     * @enum {string}
     */
    export enum MetricsEnum {
        BidRequests = <any> 'BidRequests',
        SiteRequests = <any> 'SiteRequests',
        AdUnitRequests = <any> 'AdUnitRequests',
        Bids = <any> 'Bids',
        Timeouts = <any> 'Timeouts',
        Impressions = <any> 'Impressions',
        Wins = <any> 'Wins',
        UsdRevenue = <any> 'UsdRevenue',
        UsdECPM = <any> 'UsdECPM',
        UsdBidPrice = <any> 'UsdBidPrice',
        Revenue = <any> 'Revenue',
        ECPM = <any> 'eCPM',
        BidPrice = <any> 'BidPrice',
        EurRevenue = <any> 'EurRevenue',
        EurECPM = <any> 'EurECPM',
        EurBidPrice = <any> 'EurBidPrice',
        BidRate = <any> 'BidRate',
        TimeoutRate = <any> 'TimeoutRate',
        WinRate = <any> 'WinRate'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum TimeGroupingEnum {
        Total = <any> 'Total',
        Daily = <any> 'Daily',
        Hourly = <any> 'Hourly'
    }
}

/**
 * 
 * @export
 * @interface SiteBean
 */
export interface SiteBean {
    /**
     * 
     * @type {string}
     * @memberof SiteBean
     */
    analyticSetupCode: string;
    /**
     * 
     * @type {UIXValueString}
     * @memberof SiteBean
     */
    description: UIXValueString;
    /**
     * 
     * @type {UIXValueString}
     * @memberof SiteBean
     */
    domain: UIXValueString;
    /**
     * 
     * @type {number}
     * @memberof SiteBean
     */
    id: number;
    /**
     * 
     * @type {UIXValueString}
     * @memberof SiteBean
     */
    name: UIXValueString;
    /**
     * 
     * @type {SiteHealth}
     * @memberof SiteBean
     */
    siteHealth: SiteHealth;
}

/**
 * 
 * @export
 * @interface SiteHealth
 */
export interface SiteHealth {
    /**
     * 
     * @type {number}
     * @memberof SiteHealth
     */
    activeHoursPart?: number;
    /**
     * 
     * @type {string}
     * @memberof SiteHealth
     */
    healthState: SiteHealth.HealthStateEnum;
    /**
     * 
     * @type {BootstrapStatusLabel}
     * @memberof SiteHealth
     */
    healthStatus: BootstrapStatusLabel;
    /**
     * 
     * @type {number}
     * @memberof SiteHealth
     */
    trafficHoursAgo?: number;
}

/**
 * @export
 * @namespace SiteHealth
 */
export namespace SiteHealth {
    /**
     * @export
     * @enum {string}
     */
    export enum HealthStateEnum {
        Ok = <any> 'ok',
        Normal = <any> 'normal',
        Bad = <any> 'bad',
        NotStarted = <any> 'notStarted'
    }
}

/**
 * 
 * @export
 * @interface StatBlock
 */
export interface StatBlock {
    /**
     * 
     * @type {Array&lt;StatValueSnapshot&gt;}
     * @memberof StatBlock
     */
    history: Array<StatValueSnapshot>;
    /**
     * 
     * @type {number}
     * @memberof StatBlock
     */
    maxValue: number;
    /**
     * 
     * @type {boolean}
     * @memberof StatBlock
     */
    realData: boolean;
    /**
     * 
     * @type {StatValue}
     * @memberof StatBlock
     */
    summary: StatValue;
}

/**
 * 
 * @export
 * @interface StatFilters
 */
export interface StatFilters {
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof StatFilters
     */
    adUnits: Array<string>;
    /**
     * 
     * @type {Array&lt;FilterBean&gt;}
     * @memberof StatFilters
     */
    auctionMetrics: Array<FilterBean>;
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof StatFilters
     */
    bidders: Array<string>;
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof StatFilters
     */
    browsers: Array<string>;
    /**
     * 
     * @type {Array&lt;FilterBean&gt;}
     * @memberof StatFilters
     */
    countries: Array<FilterBean>;
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof StatFilters
     */
    currencies: Array<string>;
    /**
     * 
     * @type {Array&lt;FilterBean&gt;}
     * @memberof StatFilters
     */
    devices: Array<FilterBean>;
    /**
     * 
     * @type {Array&lt;FilterBean&gt;}
     * @memberof StatFilters
     */
    revenueMetrics: Array<FilterBean>;
    /**
     * 
     * @type {Array&lt;FilterBean&gt;}
     * @memberof StatFilters
     */
    sites: Array<FilterBean>;
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof StatFilters
     */
    sizes: Array<string>;
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof StatFilters
     */
    timeGrouping: Array<StatFilters.TimeGroupingEnum>;
    /**
     * 
     * @type {boolean}
     * @memberof StatFilters
     */
    usdOnly: boolean;
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof StatFilters
     */
    utmCampaigns: Array<string>;
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof StatFilters
     */
    utmMediums: Array<string>;
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof StatFilters
     */
    utmSources: Array<string>;
}

/**
 * @export
 * @namespace StatFilters
 */
export namespace StatFilters {
    /**
     * @export
     * @enum {string}
     */
    export enum TimeGroupingEnum {
        Total = <any> 'Total',
        Daily = <any> 'Daily',
        Hourly = <any> 'Hourly'
    }
}

/**
 * 
 * @export
 * @interface StatValue
 */
export interface StatValue {
    /**
     * 
     * @type {string}
     * @memberof StatValue
     */
    formattedTrendValue?: string;
    /**
     * 
     * @type {string}
     * @memberof StatValue
     */
    formattedValue?: string;
    /**
     * 
     * @type {number}
     * @memberof StatValue
     */
    position: number;
    /**
     * 
     * @type {boolean}
     * @memberof StatValue
     */
    realData: boolean;
    /**
     * 
     * @type {number}
     * @memberof StatValue
     */
    roundedValue?: number;
    /**
     * 
     * @type {string}
     * @memberof StatValue
     */
    trend: StatValue.TrendEnum;
    /**
     * 
     * @type {number}
     * @memberof StatValue
     */
    trendPercent: number;
    /**
     * 
     * @type {number}
     * @memberof StatValue
     */
    trendValue: number;
    /**
     * 
     * @type {string}
     * @memberof StatValue
     */
    type: StatValue.TypeEnum;
    /**
     * 
     * @type {number}
     * @memberof StatValue
     */
    value: number;
}

/**
 * @export
 * @namespace StatValue
 */
export namespace StatValue {
    /**
     * @export
     * @enum {string}
     */
    export enum TrendEnum {
        Up = <any> 'up',
        Down = <any> 'down',
        Same = <any> 'same'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        Auctions = <any> 'auctions',
        Requests = <any> 'requests',
        BidRequests = <any> 'bidRequests',
        Bids = <any> 'bids',
        Wins = <any> 'wins',
        Impressions = <any> 'impressions',
        Timeouts = <any> 'timeouts',
        UsdECPM = <any> 'usdECPM',
        EurECPM = <any> 'eurECPM',
        UsdRevenue = <any> 'usdRevenue',
        EurRevenue = <any> 'eurRevenue',
        BidRate = <any> 'bidRate',
        WinRate = <any> 'winRate',
        UsdBidPrice = <any> 'usdBidPrice',
        EurBidPrice = <any> 'eurBidPrice',
        TimeoutRate = <any> 'timeoutRate'
    }
}

/**
 * 
 * @export
 * @interface StatValueSnapshot
 */
export interface StatValueSnapshot {
    /**
     * 
     * @type {Date}
     * @memberof StatValueSnapshot
     */
    dateTime: Date;
    /**
     * 
     * @type {string}
     * @memberof StatValueSnapshot
     */
    formattedTrendValue?: string;
    /**
     * 
     * @type {string}
     * @memberof StatValueSnapshot
     */
    formattedValue?: string;
    /**
     * 
     * @type {number}
     * @memberof StatValueSnapshot
     */
    position: number;
    /**
     * 
     * @type {boolean}
     * @memberof StatValueSnapshot
     */
    realData: boolean;
    /**
     * 
     * @type {number}
     * @memberof StatValueSnapshot
     */
    roundedValue?: number;
    /**
     * 
     * @type {number}
     * @memberof StatValueSnapshot
     */
    timestamp: number;
    /**
     * 
     * @type {string}
     * @memberof StatValueSnapshot
     */
    trend: StatValueSnapshot.TrendEnum;
    /**
     * 
     * @type {number}
     * @memberof StatValueSnapshot
     */
    trendPercent: number;
    /**
     * 
     * @type {number}
     * @memberof StatValueSnapshot
     */
    trendValue: number;
    /**
     * 
     * @type {string}
     * @memberof StatValueSnapshot
     */
    type: StatValueSnapshot.TypeEnum;
    /**
     * 
     * @type {number}
     * @memberof StatValueSnapshot
     */
    value: number;
}

/**
 * @export
 * @namespace StatValueSnapshot
 */
export namespace StatValueSnapshot {
    /**
     * @export
     * @enum {string}
     */
    export enum TrendEnum {
        Up = <any> 'up',
        Down = <any> 'down',
        Same = <any> 'same'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        Auctions = <any> 'auctions',
        Requests = <any> 'requests',
        BidRequests = <any> 'bidRequests',
        Bids = <any> 'bids',
        Wins = <any> 'wins',
        Impressions = <any> 'impressions',
        Timeouts = <any> 'timeouts',
        UsdECPM = <any> 'usdECPM',
        EurECPM = <any> 'eurECPM',
        UsdRevenue = <any> 'usdRevenue',
        EurRevenue = <any> 'eurRevenue',
        BidRate = <any> 'bidRate',
        WinRate = <any> 'winRate',
        UsdBidPrice = <any> 'usdBidPrice',
        EurBidPrice = <any> 'eurBidPrice',
        TimeoutRate = <any> 'timeoutRate'
    }
}

/**
 * 
 * @export
 * @interface Statistics
 */
export interface Statistics {
    /**
     * 
     * @type {StatBlock}
     * @memberof Statistics
     */
    auctions: StatBlock;
    /**
     * 
     * @type {Array&lt;AxisLabel&gt;}
     * @memberof Statistics
     */
    axisX: Array<AxisLabel>;
    /**
     * 
     * @type {Array&lt;AxisLabel&gt;}
     * @memberof Statistics
     */
    axisYLeft: Array<AxisLabel>;
    /**
     * 
     * @type {Array&lt;AxisLabel&gt;}
     * @memberof Statistics
     */
    axisYRight: Array<AxisLabel>;
    /**
     * 
     * @type {StatBlock}
     * @memberof Statistics
     */
    bidRate: StatBlock;
    /**
     * 
     * @type {StatBlock}
     * @memberof Statistics
     */
    bidRequests: StatBlock;
    /**
     * 
     * @type {StatBlock}
     * @memberof Statistics
     */
    bids: StatBlock;
    /**
     * 
     * @type {StatBlock}
     * @memberof Statistics
     */
    eurBidPrice: StatBlock;
    /**
     * 
     * @type {StatBlock}
     * @memberof Statistics
     */
    eurECPM: StatBlock;
    /**
     * 
     * @type {StatBlock}
     * @memberof Statistics
     */
    eurRevenue: StatBlock;
    /**
     * 
     * @type {StatBlock}
     * @memberof Statistics
     */
    impressions: StatBlock;
    /**
     * 
     * @type {number}
     * @memberof Statistics
     */
    maxCounterValue: number;
    /**
     * 
     * @type {number}
     * @memberof Statistics
     */
    maxMoneyValue: number;
    /**
     * 
     * @type {boolean}
     * @memberof Statistics
     */
    realData: boolean;
    /**
     * 
     * @type {StatBlock}
     * @memberof Statistics
     */
    requests: StatBlock;
    /**
     * 
     * @type {StatBlock}
     * @memberof Statistics
     */
    timeoutRate: StatBlock;
    /**
     * 
     * @type {StatBlock}
     * @memberof Statistics
     */
    usdBidPrice: StatBlock;
    /**
     * 
     * @type {StatBlock}
     * @memberof Statistics
     */
    usdECPM: StatBlock;
    /**
     * 
     * @type {StatBlock}
     * @memberof Statistics
     */
    usdRevenue: StatBlock;
    /**
     * 
     * @type {StatBlock}
     * @memberof Statistics
     */
    winRate: StatBlock;
}

/**
 * 
 * @export
 * @interface UIXValueBoolean
 */
export interface UIXValueBoolean {
    /**
     * 
     * @type {string}
     * @memberof UIXValueBoolean
     */
    error?: string;
    /**
     * 
     * @type {string}
     * @memberof UIXValueBoolean
     */
    errorLevel?: UIXValueBoolean.ErrorLevelEnum;
    /**
     * 
     * @type {string}
     * @memberof UIXValueBoolean
     */
    errorMessage?: string;
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof UIXValueBoolean
     */
    typeahead?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof UIXValueBoolean
     */
    value?: boolean;
}

/**
 * @export
 * @namespace UIXValueBoolean
 */
export namespace UIXValueBoolean {
    /**
     * @export
     * @enum {string}
     */
    export enum ErrorLevelEnum {
        Success = <any> 'success',
        Info = <any> 'info',
        Warning = <any> 'warning',
        Danger = <any> 'danger',
        Secondary = <any> 'secondary',
        Primary = <any> 'primary',
        Disabled = <any> 'disabled',
        Error = <any> 'error'
    }
}

/**
 * 
 * @export
 * @interface UIXValueEnumstring
 */
export interface UIXValueEnumstring {
    /**
     * 
     * @type {string}
     * @memberof UIXValueEnumstring
     */
    error?: string;
    /**
     * 
     * @type {string}
     * @memberof UIXValueEnumstring
     */
    errorLevel?: UIXValueEnumstring.ErrorLevelEnum;
    /**
     * 
     * @type {string}
     * @memberof UIXValueEnumstring
     */
    errorMessage?: string;
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof UIXValueEnumstring
     */
    typeahead?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof UIXValueEnumstring
     */
    value?: string;
}

/**
 * @export
 * @namespace UIXValueEnumstring
 */
export namespace UIXValueEnumstring {
    /**
     * @export
     * @enum {string}
     */
    export enum ErrorLevelEnum {
        Success = <any> 'success',
        Info = <any> 'info',
        Warning = <any> 'warning',
        Danger = <any> 'danger',
        Secondary = <any> 'secondary',
        Primary = <any> 'primary',
        Disabled = <any> 'disabled',
        Error = <any> 'error'
    }
}

/**
 * 
 * @export
 * @interface UIXValueInteger
 */
export interface UIXValueInteger {
    /**
     * 
     * @type {string}
     * @memberof UIXValueInteger
     */
    error?: string;
    /**
     * 
     * @type {string}
     * @memberof UIXValueInteger
     */
    errorLevel?: UIXValueInteger.ErrorLevelEnum;
    /**
     * 
     * @type {string}
     * @memberof UIXValueInteger
     */
    errorMessage?: string;
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof UIXValueInteger
     */
    typeahead?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof UIXValueInteger
     */
    value: string;
}

/**
 * @export
 * @namespace UIXValueInteger
 */
export namespace UIXValueInteger {
    /**
     * @export
     * @enum {string}
     */
    export enum ErrorLevelEnum {
        Success = <any> 'success',
        Info = <any> 'info',
        Warning = <any> 'warning',
        Danger = <any> 'danger',
        Secondary = <any> 'secondary',
        Primary = <any> 'primary',
        Disabled = <any> 'disabled',
        Error = <any> 'error'
    }
}

/**
 * 
 * @export
 * @interface UIXValueString
 */
export interface UIXValueString {
    /**
     * 
     * @type {boolean}
     * @memberof UIXValueString
     */
    empty?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UIXValueString
     */
    errorLevel?: UIXValueString.ErrorLevelEnum;
    /**
     * 
     * @type {string}
     * @memberof UIXValueString
     */
    errorMessage?: string;
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof UIXValueString
     */
    typeahead?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof UIXValueString
     */
    value: string;
}

/**
 * @export
 * @namespace UIXValueString
 */
export namespace UIXValueString {
    /**
     * @export
     * @enum {string}
     */
    export enum ErrorLevelEnum {
        Success = <any> 'success',
        Info = <any> 'info',
        Warning = <any> 'warning',
        Danger = <any> 'danger',
        Secondary = <any> 'secondary',
        Primary = <any> 'primary',
        Disabled = <any> 'disabled',
        Error = <any> 'error'
    }
}

/**
 * 
 * @export
 * @interface XYChartData
 */
export interface XYChartData {
    /**
     * 
     * @type {Array&lt;string&gt;}
     * @memberof XYChartData
     */
    xlabels?: Array<string>;
    /**
     * 
     * @type {Array&lt;YValues&gt;}
     * @memberof XYChartData
     */
    yvalues?: Array<YValues>;
}

/**
 * 
 * @export
 * @interface YValues
 */
export interface YValues {
    /**
     * 
     * @type {Array&lt;number&gt;}
     * @memberof YValues
     */
    valuesByX: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof YValues
     */
    ylabel?: string;
}

/**
 * 
 * @export
 * @interface YValuesDouble
 */
export interface YValuesDouble {
    /**
     * 
     * @type {Array&lt;number&gt;}
     * @memberof YValuesDouble
     */
    valuesByX: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof YValuesDouble
     */
    ylabel?: string;
}


/**
 * PartnerAccountControllerApi - fetch parameter creator
 * @export
 */
export const PartnerAccountControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary archiveSite
         * @param {number} accountId accountId
         * @param {number} bundleId bundleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveSiteUsingPUT(accountId: number, bundleId: number, options: any = {}): FetchArgs {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling archiveSiteUsingPUT.');
            }
            // verify required parameter 'bundleId' is not null or undefined
            if (bundleId === null || bundleId === undefined) {
                throw new RequiredError('bundleId','Required parameter bundleId was null or undefined when calling archiveSiteUsingPUT.');
            }
            const localVarPath = `/api/partner/archive/{accountId}/{bundleId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"bundleId"}}`, encodeURIComponent(String(bundleId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary createPublisher
         * @param {RegistrationForm} form form
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPublisherUsingPOST(form: RegistrationForm, options: any = {}): FetchArgs {
            // verify required parameter 'form' is not null or undefined
            if (form === null || form === undefined) {
                throw new RequiredError('form','Required parameter form was null or undefined when calling createPublisherUsingPOST.');
            }
            const localVarPath = `/api/partner/account/register`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"RegistrationForm" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(form || {}) : (form || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary createSite
         * @param {number} accountId accountId
         * @param {BundleCreateForm} form form
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSiteUsingPOST(accountId: number, form: BundleCreateForm, options: any = {}): FetchArgs {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling createSiteUsingPOST.');
            }
            // verify required parameter 'form' is not null or undefined
            if (form === null || form === undefined) {
                throw new RequiredError('form','Required parameter form was null or undefined when calling createSiteUsingPOST.');
            }
            const localVarPath = `/api/partner/account/createSite/{accountId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"BundleCreateForm" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(form || {}) : (form || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deletePublisher
         * @param {number} accountId accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePublisherUsingDELETE(accountId: number, options: any = {}): FetchArgs {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling deletePublisherUsingDELETE.');
            }
            const localVarPath = `/api/partner/account/delete/{accountId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary loginAs
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginAsUsingGET1(userId: number, options: any = {}): FetchArgs {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling loginAsUsingGET1.');
            }
            const localVarPath = `/api/partner/customer/login-as/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PartnerAccountControllerApi - functional programming interface
 * @export
 */
export const PartnerAccountControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary archiveSite
         * @param {number} accountId accountId
         * @param {number} bundleId bundleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveSiteUsingPUT(accountId: number, bundleId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PartnerAccountControllerApiFetchParamCreator(configuration).archiveSiteUsingPUT(accountId, bundleId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary createPublisher
         * @param {RegistrationForm} form form
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPublisherUsingPOST(form: RegistrationForm, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RegistrationResponseAdmin> {
            const localVarFetchArgs = PartnerAccountControllerApiFetchParamCreator(configuration).createPublisherUsingPOST(form, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary createSite
         * @param {number} accountId accountId
         * @param {BundleCreateForm} form form
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSiteUsingPOST(accountId: number, form: BundleCreateForm, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BundleCreateResponseAdmin> {
            const localVarFetchArgs = PartnerAccountControllerApiFetchParamCreator(configuration).createSiteUsingPOST(accountId, form, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary deletePublisher
         * @param {number} accountId accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePublisherUsingDELETE(accountId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PartnerAccountControllerApiFetchParamCreator(configuration).deletePublisherUsingDELETE(accountId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary loginAs
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginAsUsingGET1(userId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ItemResponsestring> {
            const localVarFetchArgs = PartnerAccountControllerApiFetchParamCreator(configuration).loginAsUsingGET1(userId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PartnerAccountControllerApi - factory interface
 * @export
 */
export const PartnerAccountControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary archiveSite
         * @param {number} accountId accountId
         * @param {number} bundleId bundleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveSiteUsingPUT(accountId: number, bundleId: number, options?: any) {
            return PartnerAccountControllerApiFp(configuration).archiveSiteUsingPUT(accountId, bundleId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary createPublisher
         * @param {RegistrationForm} form form
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPublisherUsingPOST(form: RegistrationForm, options?: any) {
            return PartnerAccountControllerApiFp(configuration).createPublisherUsingPOST(form, options)(fetch, basePath);
        },
        /**
         * 
         * @summary createSite
         * @param {number} accountId accountId
         * @param {BundleCreateForm} form form
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSiteUsingPOST(accountId: number, form: BundleCreateForm, options?: any) {
            return PartnerAccountControllerApiFp(configuration).createSiteUsingPOST(accountId, form, options)(fetch, basePath);
        },
        /**
         * 
         * @summary deletePublisher
         * @param {number} accountId accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePublisherUsingDELETE(accountId: number, options?: any) {
            return PartnerAccountControllerApiFp(configuration).deletePublisherUsingDELETE(accountId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary loginAs
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginAsUsingGET1(userId: number, options?: any) {
            return PartnerAccountControllerApiFp(configuration).loginAsUsingGET1(userId, options)(fetch, basePath);
        },
    };
};

/**
 * PartnerAccountControllerApi - object-oriented interface
 * @export
 * @class PartnerAccountControllerApi
 * @extends {BaseAPI}
 */
export class PartnerAccountControllerApi extends BaseAPI {
    /**
     * 
     * @summary archiveSite
     * @param {} accountId accountId
     * @param {} bundleId bundleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnerAccountControllerApi
     */
    public archiveSiteUsingPUT(accountId: number, bundleId: number, options?: any) {
        return PartnerAccountControllerApiFp(this.configuration).archiveSiteUsingPUT(accountId, bundleId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary createPublisher
     * @param {} form form
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnerAccountControllerApi
     */
    public createPublisherUsingPOST(form: RegistrationForm, options?: any) {
        return PartnerAccountControllerApiFp(this.configuration).createPublisherUsingPOST(form, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary createSite
     * @param {} accountId accountId
     * @param {} form form
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnerAccountControllerApi
     */
    public createSiteUsingPOST(accountId: number, form: BundleCreateForm, options?: any) {
        return PartnerAccountControllerApiFp(this.configuration).createSiteUsingPOST(accountId, form, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary deletePublisher
     * @param {} accountId accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnerAccountControllerApi
     */
    public deletePublisherUsingDELETE(accountId: number, options?: any) {
        return PartnerAccountControllerApiFp(this.configuration).deletePublisherUsingDELETE(accountId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary loginAs
     * @param {} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnerAccountControllerApi
     */
    public loginAsUsingGET1(userId: number, options?: any) {
        return PartnerAccountControllerApiFp(this.configuration).loginAsUsingGET1(userId, options)(this.fetch, this.basePath);
    }

}

/**
 * PartnerSiteControllerApi - fetch parameter creator
 * @export
 */
export const PartnerSiteControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getSite
         * @param {number} bundleId bundleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSiteUsingGET(bundleId: number, options: any = {}): FetchArgs {
            // verify required parameter 'bundleId' is not null or undefined
            if (bundleId === null || bundleId === undefined) {
                throw new RequiredError('bundleId','Required parameter bundleId was null or undefined when calling getSiteUsingGET.');
            }
            const localVarPath = `/api/partner/site/getSite/{bundleId}`
                .replace(`{${"bundleId"}}`, encodeURIComponent(String(bundleId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PartnerSiteControllerApi - functional programming interface
 * @export
 */
export const PartnerSiteControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getSite
         * @param {number} bundleId bundleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSiteUsingGET(bundleId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SiteBean> {
            const localVarFetchArgs = PartnerSiteControllerApiFetchParamCreator(configuration).getSiteUsingGET(bundleId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PartnerSiteControllerApi - factory interface
 * @export
 */
export const PartnerSiteControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary getSite
         * @param {number} bundleId bundleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSiteUsingGET(bundleId: number, options?: any) {
            return PartnerSiteControllerApiFp(configuration).getSiteUsingGET(bundleId, options)(fetch, basePath);
        },
    };
};

/**
 * PartnerSiteControllerApi - object-oriented interface
 * @export
 * @class PartnerSiteControllerApi
 * @extends {BaseAPI}
 */
export class PartnerSiteControllerApi extends BaseAPI {
    /**
     * 
     * @summary getSite
     * @param {} bundleId bundleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnerSiteControllerApi
     */
    public getSiteUsingGET(bundleId: number, options?: any) {
        return PartnerSiteControllerApiFp(this.configuration).getSiteUsingGET(bundleId, options)(this.fetch, this.basePath);
    }

}

/**
 * PartnerStatControllerApi - fetch parameter creator
 * @export
 */
export const PartnerStatControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary dashboard
         * @param {DashboardQuery} query query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardUsingPOST(query: DashboardQuery, options: any = {}): FetchArgs {
            // verify required parameter 'query' is not null or undefined
            if (query === null || query === undefined) {
                throw new RequiredError('query','Required parameter query was null or undefined when calling dashboardUsingPOST.');
            }
            const localVarPath = `/api/partner/stat/dashboard`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"DashboardQuery" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(query || {}) : (query || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary downloadAuctionsReport
         * @param {BasicReportQuery} query query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadAuctionsReportUsingPOST(query: BasicReportQuery, options: any = {}): FetchArgs {
            // verify required parameter 'query' is not null or undefined
            if (query === null || query === undefined) {
                throw new RequiredError('query','Required parameter query was null or undefined when calling downloadAuctionsReportUsingPOST.');
            }
            const localVarPath = `/api/partner/stat/download/report/auctions`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"BasicReportQuery" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(query || {}) : (query || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary downloadRevenueReport
         * @param {RevenueReportQuery} query query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadRevenueReportUsingPOST(query: RevenueReportQuery, options: any = {}): FetchArgs {
            // verify required parameter 'query' is not null or undefined
            if (query === null || query === undefined) {
                throw new RequiredError('query','Required parameter query was null or undefined when calling downloadRevenueReportUsingPOST.');
            }
            const localVarPath = `/api/partner/stat/download/report/revenue`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"RevenueReportQuery" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(query || {}) : (query || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary filters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filtersUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/api/partner/stat/filters`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary generateAuctionsJsonReport
         * @param {BasicReportQuery} query query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateAuctionsJsonReportUsingPOST(query: BasicReportQuery, options: any = {}): FetchArgs {
            // verify required parameter 'query' is not null or undefined
            if (query === null || query === undefined) {
                throw new RequiredError('query','Required parameter query was null or undefined when calling generateAuctionsJsonReportUsingPOST.');
            }
            const localVarPath = `/api/partner/stat/generate/report/auctions`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"BasicReportQuery" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(query || {}) : (query || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary generateRevenueJsonReport
         * @param {RevenueReportQuery} query query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateRevenueJsonReportUsingPOST(query: RevenueReportQuery, options: any = {}): FetchArgs {
            // verify required parameter 'query' is not null or undefined
            if (query === null || query === undefined) {
                throw new RequiredError('query','Required parameter query was null or undefined when calling generateRevenueJsonReportUsingPOST.');
            }
            const localVarPath = `/api/partner/stat/generate/report/revenue`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"RevenueReportQuery" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(query || {}) : (query || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary loadBidderFunnelChart
         * @param {BidderMetricsQuery} bidderMetricsQuery bidderMetricsQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadBidderFunnelChartUsingPOST(bidderMetricsQuery: BidderMetricsQuery, options: any = {}): FetchArgs {
            // verify required parameter 'bidderMetricsQuery' is not null or undefined
            if (bidderMetricsQuery === null || bidderMetricsQuery === undefined) {
                throw new RequiredError('bidderMetricsQuery','Required parameter bidderMetricsQuery was null or undefined when calling loadBidderFunnelChartUsingPOST.');
            }
            const localVarPath = `/api/partner/stat/bidders/funnel`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"BidderMetricsQuery" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(bidderMetricsQuery || {}) : (bidderMetricsQuery || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary loadBiddersMetricsByTime
         * @param {BidderMetricsQuery} bidderMetricsQuery bidderMetricsQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadBiddersMetricsByTimeUsingPOST(bidderMetricsQuery: BidderMetricsQuery, options: any = {}): FetchArgs {
            // verify required parameter 'bidderMetricsQuery' is not null or undefined
            if (bidderMetricsQuery === null || bidderMetricsQuery === undefined) {
                throw new RequiredError('bidderMetricsQuery','Required parameter bidderMetricsQuery was null or undefined when calling loadBiddersMetricsByTimeUsingPOST.');
            }
            const localVarPath = `/api/partner/stat/bidders/metrics`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"BidderMetricsQuery" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(bidderMetricsQuery || {}) : (bidderMetricsQuery || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary loadBiddersResponseTimeChart
         * @param {BidderMetricsQuery} bidderMetricsQuery bidderMetricsQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadBiddersResponseTimeChartUsingPOST(bidderMetricsQuery: BidderMetricsQuery, options: any = {}): FetchArgs {
            // verify required parameter 'bidderMetricsQuery' is not null or undefined
            if (bidderMetricsQuery === null || bidderMetricsQuery === undefined) {
                throw new RequiredError('bidderMetricsQuery','Required parameter bidderMetricsQuery was null or undefined when calling loadBiddersResponseTimeChartUsingPOST.');
            }
            const localVarPath = `/api/partner/stat/bidders/responseTime`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"BidderMetricsQuery" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(bidderMetricsQuery || {}) : (bidderMetricsQuery || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary loadIncrementalRevenueChart
         * @param {BidderMetricsQuery} bidderMetricsQuery bidderMetricsQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadIncrementalRevenueChartUsingPOST(bidderMetricsQuery: BidderMetricsQuery, options: any = {}): FetchArgs {
            // verify required parameter 'bidderMetricsQuery' is not null or undefined
            if (bidderMetricsQuery === null || bidderMetricsQuery === undefined) {
                throw new RequiredError('bidderMetricsQuery','Required parameter bidderMetricsQuery was null or undefined when calling loadIncrementalRevenueChartUsingPOST.');
            }
            const localVarPath = `/api/partner/stat/bidders/incrementalRevenue`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"BidderMetricsQuery" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(bidderMetricsQuery || {}) : (bidderMetricsQuery || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary loadOverviewChart
         * @param {DashboardQuery} overviewQuery overviewQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadOverviewChartUsingPOST(overviewQuery: DashboardQuery, options: any = {}): FetchArgs {
            // verify required parameter 'overviewQuery' is not null or undefined
            if (overviewQuery === null || overviewQuery === undefined) {
                throw new RequiredError('overviewQuery','Required parameter overviewQuery was null or undefined when calling loadOverviewChartUsingPOST.');
            }
            const localVarPath = `/api/partner/stat/dashboard/overview`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"DashboardQuery" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(overviewQuery || {}) : (overviewQuery || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PartnerStatControllerApi - functional programming interface
 * @export
 */
export const PartnerStatControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary dashboard
         * @param {DashboardQuery} query query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardUsingPOST(query: DashboardQuery, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DashboardBean> {
            const localVarFetchArgs = PartnerStatControllerApiFetchParamCreator(configuration).dashboardUsingPOST(query, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary downloadAuctionsReport
         * @param {BasicReportQuery} query query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadAuctionsReportUsingPOST(query: BasicReportQuery, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PartnerStatControllerApiFetchParamCreator(configuration).downloadAuctionsReportUsingPOST(query, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary downloadRevenueReport
         * @param {RevenueReportQuery} query query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadRevenueReportUsingPOST(query: RevenueReportQuery, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PartnerStatControllerApiFetchParamCreator(configuration).downloadRevenueReportUsingPOST(query, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary filters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filtersUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<StatFilters> {
            const localVarFetchArgs = PartnerStatControllerApiFetchParamCreator(configuration).filtersUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary generateAuctionsJsonReport
         * @param {BasicReportQuery} query query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateAuctionsJsonReportUsingPOST(query: BasicReportQuery, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<JsonReport> {
            const localVarFetchArgs = PartnerStatControllerApiFetchParamCreator(configuration).generateAuctionsJsonReportUsingPOST(query, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary generateRevenueJsonReport
         * @param {RevenueReportQuery} query query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateRevenueJsonReportUsingPOST(query: RevenueReportQuery, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<JsonReport> {
            const localVarFetchArgs = PartnerStatControllerApiFetchParamCreator(configuration).generateRevenueJsonReportUsingPOST(query, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary loadBidderFunnelChart
         * @param {BidderMetricsQuery} bidderMetricsQuery bidderMetricsQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadBidderFunnelChartUsingPOST(bidderMetricsQuery: BidderMetricsQuery, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FunnelChartData> {
            const localVarFetchArgs = PartnerStatControllerApiFetchParamCreator(configuration).loadBidderFunnelChartUsingPOST(bidderMetricsQuery, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary loadBiddersMetricsByTime
         * @param {BidderMetricsQuery} bidderMetricsQuery bidderMetricsQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadBiddersMetricsByTimeUsingPOST(bidderMetricsQuery: BidderMetricsQuery, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BiddersMetricByTime> {
            const localVarFetchArgs = PartnerStatControllerApiFetchParamCreator(configuration).loadBiddersMetricsByTimeUsingPOST(bidderMetricsQuery, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary loadBiddersResponseTimeChart
         * @param {BidderMetricsQuery} bidderMetricsQuery bidderMetricsQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadBiddersResponseTimeChartUsingPOST(bidderMetricsQuery: BidderMetricsQuery, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<XYChartData> {
            const localVarFetchArgs = PartnerStatControllerApiFetchParamCreator(configuration).loadBiddersResponseTimeChartUsingPOST(bidderMetricsQuery, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary loadIncrementalRevenueChart
         * @param {BidderMetricsQuery} bidderMetricsQuery bidderMetricsQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadIncrementalRevenueChartUsingPOST(bidderMetricsQuery: BidderMetricsQuery, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IncrementalRevenueChartData> {
            const localVarFetchArgs = PartnerStatControllerApiFetchParamCreator(configuration).loadIncrementalRevenueChartUsingPOST(bidderMetricsQuery, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary loadOverviewChart
         * @param {DashboardQuery} overviewQuery overviewQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadOverviewChartUsingPOST(overviewQuery: DashboardQuery, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<OverviewChartsData> {
            const localVarFetchArgs = PartnerStatControllerApiFetchParamCreator(configuration).loadOverviewChartUsingPOST(overviewQuery, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PartnerStatControllerApi - factory interface
 * @export
 */
export const PartnerStatControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary dashboard
         * @param {DashboardQuery} query query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardUsingPOST(query: DashboardQuery, options?: any) {
            return PartnerStatControllerApiFp(configuration).dashboardUsingPOST(query, options)(fetch, basePath);
        },
        /**
         * 
         * @summary downloadAuctionsReport
         * @param {BasicReportQuery} query query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadAuctionsReportUsingPOST(query: BasicReportQuery, options?: any) {
            return PartnerStatControllerApiFp(configuration).downloadAuctionsReportUsingPOST(query, options)(fetch, basePath);
        },
        /**
         * 
         * @summary downloadRevenueReport
         * @param {RevenueReportQuery} query query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadRevenueReportUsingPOST(query: RevenueReportQuery, options?: any) {
            return PartnerStatControllerApiFp(configuration).downloadRevenueReportUsingPOST(query, options)(fetch, basePath);
        },
        /**
         * 
         * @summary filters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filtersUsingGET(options?: any) {
            return PartnerStatControllerApiFp(configuration).filtersUsingGET(options)(fetch, basePath);
        },
        /**
         * 
         * @summary generateAuctionsJsonReport
         * @param {BasicReportQuery} query query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateAuctionsJsonReportUsingPOST(query: BasicReportQuery, options?: any) {
            return PartnerStatControllerApiFp(configuration).generateAuctionsJsonReportUsingPOST(query, options)(fetch, basePath);
        },
        /**
         * 
         * @summary generateRevenueJsonReport
         * @param {RevenueReportQuery} query query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateRevenueJsonReportUsingPOST(query: RevenueReportQuery, options?: any) {
            return PartnerStatControllerApiFp(configuration).generateRevenueJsonReportUsingPOST(query, options)(fetch, basePath);
        },
        /**
         * 
         * @summary loadBidderFunnelChart
         * @param {BidderMetricsQuery} bidderMetricsQuery bidderMetricsQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadBidderFunnelChartUsingPOST(bidderMetricsQuery: BidderMetricsQuery, options?: any) {
            return PartnerStatControllerApiFp(configuration).loadBidderFunnelChartUsingPOST(bidderMetricsQuery, options)(fetch, basePath);
        },
        /**
         * 
         * @summary loadBiddersMetricsByTime
         * @param {BidderMetricsQuery} bidderMetricsQuery bidderMetricsQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadBiddersMetricsByTimeUsingPOST(bidderMetricsQuery: BidderMetricsQuery, options?: any) {
            return PartnerStatControllerApiFp(configuration).loadBiddersMetricsByTimeUsingPOST(bidderMetricsQuery, options)(fetch, basePath);
        },
        /**
         * 
         * @summary loadBiddersResponseTimeChart
         * @param {BidderMetricsQuery} bidderMetricsQuery bidderMetricsQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadBiddersResponseTimeChartUsingPOST(bidderMetricsQuery: BidderMetricsQuery, options?: any) {
            return PartnerStatControllerApiFp(configuration).loadBiddersResponseTimeChartUsingPOST(bidderMetricsQuery, options)(fetch, basePath);
        },
        /**
         * 
         * @summary loadIncrementalRevenueChart
         * @param {BidderMetricsQuery} bidderMetricsQuery bidderMetricsQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadIncrementalRevenueChartUsingPOST(bidderMetricsQuery: BidderMetricsQuery, options?: any) {
            return PartnerStatControllerApiFp(configuration).loadIncrementalRevenueChartUsingPOST(bidderMetricsQuery, options)(fetch, basePath);
        },
        /**
         * 
         * @summary loadOverviewChart
         * @param {DashboardQuery} overviewQuery overviewQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadOverviewChartUsingPOST(overviewQuery: DashboardQuery, options?: any) {
            return PartnerStatControllerApiFp(configuration).loadOverviewChartUsingPOST(overviewQuery, options)(fetch, basePath);
        },
    };
};

/**
 * PartnerStatControllerApi - object-oriented interface
 * @export
 * @class PartnerStatControllerApi
 * @extends {BaseAPI}
 */
export class PartnerStatControllerApi extends BaseAPI {
    /**
     * 
     * @summary dashboard
     * @param {} query query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnerStatControllerApi
     */
    public dashboardUsingPOST(query: DashboardQuery, options?: any) {
        return PartnerStatControllerApiFp(this.configuration).dashboardUsingPOST(query, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary downloadAuctionsReport
     * @param {} query query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnerStatControllerApi
     */
    public downloadAuctionsReportUsingPOST(query: BasicReportQuery, options?: any) {
        return PartnerStatControllerApiFp(this.configuration).downloadAuctionsReportUsingPOST(query, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary downloadRevenueReport
     * @param {} query query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnerStatControllerApi
     */
    public downloadRevenueReportUsingPOST(query: RevenueReportQuery, options?: any) {
        return PartnerStatControllerApiFp(this.configuration).downloadRevenueReportUsingPOST(query, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary filters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnerStatControllerApi
     */
    public filtersUsingGET(options?: any) {
        return PartnerStatControllerApiFp(this.configuration).filtersUsingGET(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary generateAuctionsJsonReport
     * @param {} query query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnerStatControllerApi
     */
    public generateAuctionsJsonReportUsingPOST(query: BasicReportQuery, options?: any) {
        return PartnerStatControllerApiFp(this.configuration).generateAuctionsJsonReportUsingPOST(query, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary generateRevenueJsonReport
     * @param {} query query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnerStatControllerApi
     */
    public generateRevenueJsonReportUsingPOST(query: RevenueReportQuery, options?: any) {
        return PartnerStatControllerApiFp(this.configuration).generateRevenueJsonReportUsingPOST(query, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary loadBidderFunnelChart
     * @param {} bidderMetricsQuery bidderMetricsQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnerStatControllerApi
     */
    public loadBidderFunnelChartUsingPOST(bidderMetricsQuery: BidderMetricsQuery, options?: any) {
        return PartnerStatControllerApiFp(this.configuration).loadBidderFunnelChartUsingPOST(bidderMetricsQuery, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary loadBiddersMetricsByTime
     * @param {} bidderMetricsQuery bidderMetricsQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnerStatControllerApi
     */
    public loadBiddersMetricsByTimeUsingPOST(bidderMetricsQuery: BidderMetricsQuery, options?: any) {
        return PartnerStatControllerApiFp(this.configuration).loadBiddersMetricsByTimeUsingPOST(bidderMetricsQuery, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary loadBiddersResponseTimeChart
     * @param {} bidderMetricsQuery bidderMetricsQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnerStatControllerApi
     */
    public loadBiddersResponseTimeChartUsingPOST(bidderMetricsQuery: BidderMetricsQuery, options?: any) {
        return PartnerStatControllerApiFp(this.configuration).loadBiddersResponseTimeChartUsingPOST(bidderMetricsQuery, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary loadIncrementalRevenueChart
     * @param {} bidderMetricsQuery bidderMetricsQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnerStatControllerApi
     */
    public loadIncrementalRevenueChartUsingPOST(bidderMetricsQuery: BidderMetricsQuery, options?: any) {
        return PartnerStatControllerApiFp(this.configuration).loadIncrementalRevenueChartUsingPOST(bidderMetricsQuery, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary loadOverviewChart
     * @param {} overviewQuery overviewQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnerStatControllerApi
     */
    public loadOverviewChartUsingPOST(overviewQuery: DashboardQuery, options?: any) {
        return PartnerStatControllerApiFp(this.configuration).loadOverviewChartUsingPOST(overviewQuery, options)(this.fetch, this.basePath);
    }

}

